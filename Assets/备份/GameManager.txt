using System.Collections.Generic;
using System.Runtime.CompilerServices;
using JetBrains.Annotations;
using UnityEngine;
using System;

public class GameManager : MonoBehaviour
{
    public static GameManager Instance;

    [HideInInspector] public bool hasgameFinished;

    public float EdgeSize => _cellGap + _cellSize; // Property to calculate the edge size of a cell (gap + size)
    // NumberLink Game Controller

    // ========== Prefabs & Components ==========
    [SerializeField] private Cell _cellPrefab;          // Prefab for each grid cell (contains number/pipe visuals)
    [SerializeField] private SpriteRenderer _bgSprite;  // Background renderer (grid lines or solid color)
    [SerializeField] private SpriteRenderer _highlightSprite; // Visual highlight for player's drag path

    // ========== Highlight Parameters ==========
    [SerializeField] private Vector2 _highlightSize;    // Dimensions (width/height) of the connection highlight during drag

    // ========== Level Data ==========
    [SerializeField] private LevelData _levelData;      // Contains level layout (number pairs, grid size, etc.)

    // ========== Layout Settings ==========
    [SerializeField] private float _cellGap;           // Spacing between adjacent cells
    [SerializeField] private float _cellSize;          // Uniform size of each cell
    [SerializeField] private float _levelGap;          // Padding between grid and screen edges


    // Represents the logical game grid containing number values
    // - Uses int values where 0 = empty, positive numbers = connectable pairs
    // - Example: levelgrid[1,2] = 3 means this cell belongs to pair #3
    private int[,] levelgrid;

    // Stores references to all instantiated Cell objects in the game
    // - Mirrors the structure of levelgrid but holds GameObject references
    // - Example: cellGrid[1,2] returns the Cell script at (1,2) coordinate
    private Cell[,] cellGrid;

    // Reference to the cell where the player started dragging a connection
    // - Null when no connection is being made
    // - Set when player clicks/taps on a numbered cell
    private Cell startCell;

    // Screen/world position where the drag started
    // - Used to calculate drag direction and connection length
    // - Typically matches startCell.transform.position initially
    private Vector2 startPos;

    private List<Vector2Int> Directions = new List<Vector2Int>() {
    Vector2Int.up,    // (0, 1)    ↑ 
    Vector2Int.right, // (1, 0)    → 
    Vector2Int.down,  // (0, -1)   ↓ 
    Vector2Int.left   // (-1, 0)   ← 
};

    private void Awake()
    {
        Instance = this;
        hasgameFinished = false;
        _highlightSprite.gameObject.SetActive(false); // Hide highlight sprite initially  
        levelgrid = new int[_levelData.row, _levelData.col]; // Initialize level grid with specified dimensions
        cellGrid = new Cell[_levelData.row, _levelData.col]; // Initialize cell grid with specified dimensions
        for (int i = 0; i < _levelData.row; i++)
        {
            for (int j = 0; j < _levelData.col; j++)
            {
                levelgrid[i, j] = _levelData.data[i * _levelData.row + j]; // Fill level grid with data from LevelData
            }
        }
        SpawnLevel(); // Call method to spawn the level layout
    }

    private void SpawnLevel()
    {
        float width = (_cellSize + _cellGap) * _levelData.col - _cellGap + _levelGap; // Calculate total width of the grid
        float height = (_cellSize + _cellGap) * _levelData.row - _cellGap + _levelGap; // Calculate total height of the grid
        _bgSprite.size = new Vector2(width, height); // Set background sprite size to match grid dimensions
        Vector3 bgPos = new Vector3(
            width / 2f - _cellSize / 2f - _levelGap / 2f, // Center the background sprite horizontally
            height / 2f - _cellSize / 2f - _levelGap / 2f, // Center the background sprite vertically
            0
        );
        _bgSprite.transform.position = bgPos; // Set background sprite position

        Camera.main.orthographicSize = width * 1.2f; // Adjust camera size to fit the grid
        Camera.main.transform.position = new Vector3(bgPos.x, bgPos.y, -10f); // Set camera position

        Vector3 startPos = Vector3.zero; // Initialize starting position for cell placement
        Vector3 rightOffset = Vector3.right * (_cellSize + _cellGap); // Offset for right placement
        Vector3 topOffset = Vector3.up * (_cellSize + _cellGap); // Offset for top placement

        for (int i = 0; i < _levelData.row; i++)
        {
            for (int j = 0; j < _levelData.col; j++)
            {
                Vector3 spawnPos = startPos + j * rightOffset + i * topOffset; // Calculate position for each cell
                Cell tempCell = Instantiate(_cellPrefab, spawnPos, Quaternion.identity); // Instantiate cell prefab
                tempCell.Init(i, j, levelgrid[i, j]); // Initialize cell with row, column, and number
                cellGrid[i, j] = tempCell; // Store reference in cell grid
                if (tempCell.Number == 0)
                { // If cell is empty (0)
                    Destroy(tempCell.gameObject); // Destroy the cell object
                    cellGrid[i, j] = null; // Set reference to null in cell grid
                }
            }
        }

        //connect edges
        for (int i = 0; i < _levelData.row; i++)
        {
            for (int j = 0; j < _levelData.col; j++)
            {
                if (cellGrid[i, j] != null)
                {
                    cellGrid[i, j].Init();
                }
            }
        }
    }

    private void Update()
    {
        if(hasgameFinished ) return; // Skip update if game is finished
        if(Input.GetMouseButtonDown(0)){//when mouse down
            startCell=null;
            Vector3 mousePos=Camera.main.ScreenToWorldPoint(Input.mousePosition); // Get mouse position in world coordinates
            Vector2 mousePos2D=new Vector2(mousePos.x,mousePos.y); // Convert to 2D vector
            RaycastHit2D hit=Physics2D.Raycast(mousePos2D,Vector2.zero); // Perform raycast to detect cell under mouse
            startPos=mousePos2D; // Set start position to mouse position
            if(hit&&hit.collider.TryGetComponent(out startCell)){
                _highlightSprite.gameObject.SetActive(true); // Show highlight sprite
                _highlightSprite.size=_highlightSize; // Set highlight size with preprovided size
                _highlightSprite.transform.position=startCell.transform.position; // Position highlight sprite at start cell

                
            }
            else{
                hit=Physics2D.Raycast(mousePos2D,Vector2.left); // Perform raycast to detect cell under mouse
                if(hit&&hit.collider.TryGetComponent(out startCell)){
                    startCell.RemoveEdge(0); // Remove edge in the right direction
                }

                hit =Physics2D.Raycast(mousePos2D,Vector2.down); // Perform raycast to detect cell under mouse
                if(hit&&hit.collider.TryGetComponent(out startCell)){
                    startCell.RemoveEdge(1); // Remove edge in the up direction
                }
                hit =Physics2D.Raycast(mousePos2D,Vector2.right); // Perform raycast to detect cell under mouse
                if(hit&&hit.collider.TryGetComponent(out startCell)){
                    startCell.RemoveEdge(2); // Remove edge in the left direction
                }
                hit =Physics2D.Raycast(mousePos2D,Vector2.up); // Perform raycast to detect cell under mouse
                if(hit&&hit.collider.TryGetComponent(out startCell)){
                    startCell.RemoveEdge(3); // Remove edge in the down direction
                }
                startCell=null; // Reset start cell to null if no valid cell is found
            }

        }
        else if(Input.GetMouseButton(0)){//when dragging mouse
            if(startCell==null) return; // Skip if no start cell is selected

            Vector3 mousePos=Camera.main.ScreenToWorldPoint(Input.mousePosition); // Get current mouse position in world coordinates
            Vector2 mousePos2D=new Vector2(mousePos.x,mousePos.y); // Convert to 2D vector
            Vector2 offset=mousePos2D-startPos; // Calculate offset from start position
            Vector2Int offsetDirection=GetDirection(offset); // Determine direction of the drag based on offset
            float offsetValue=GetOffset(offset,offsetDirection); // Get the absolute offset value based on direction
            int directionIndex=GetDirectionIndex(offsetDirection); // Get the index of the direction (0 = right, 1 = up, 2 = left, 3 = down)
            Vector3 angle=new Vector3(0,0,90f*(directionIndex-1)); // Calculate rotation angle based on direction index
            _highlightSprite.size=new Vector2(_highlightSize.x,offsetValue); // Set highlight size based on offset value
            _highlightSprite.transform.eulerAngles=angle; // Rotate highlight sprite to match drag direction

        }
        else if(Input.GetMouseButtonUp(0)){//when mouse up
            if(startCell==null) return;

            Vector3 mousePos=Camera.main.ScreenToWorldPoint(Input.mousePosition); // Get current mouse position in world coordinates
            Vector2 mousePos2D=new Vector2(mousePos.x,mousePos.y); // Convert to 2D vector
            RaycastHit2D hit=Physics2D.Raycast(mousePos2D,Vector2.zero); // Perform raycast to detect cell under mouse
            if(hit&&hit.collider.TryGetComponent(out Cell endCell)){
                if(endCell==startCell){
                    startCell.RemoveAllEdges();
                    for(int i=0;i<4;i++){
                        var adjacentCell=GetAdjacentCell(startCell.Row,startCell.Column,i); // Get adjacent cell in the specified direction
                        if(adjacentCell!=null){
                            int adjacentDirection=(i+2)%4; // Calculate the opposite direction index
                            adjacentCell.RemoveEdge(adjacentDirection); // Remove edge in the opposite direction
                            adjacentCell.RemoveEdge(adjacentDirection); // Remove edge in the opposite direction
                        }
                    }
                }

                else{
                    Vector2 offset=mousePos2D-startPos; // Calculate offset from start position
                    Vector2Int offsetDirection=GetDirection(offset); // Determine direction of the drag based on offset
                    int directionIndex=GetDirectionIndex(offsetDirection); // Get the index of the direction (0 = right, 1 = up, 2 = left, 3 = down)
                    if(startCell.IsValidCell(endCell,directionIndex)){
                        startCell.AddEdge(directionIndex); // Add edge in the specified direction
                        endCell.AddEdge((directionIndex+2)%4); // Add edge in the opposite direction
                    }
                }
            }
            startCell=null; // Reset start cell to null after releasing the mouse
            _highlightSprite.gameObject.SetActive(false); // Hide highlight sprite

            CheckWin(); // Check if the game is won after releasing the mouse
        }
    }


    private void CheckWin(){
        for(int i=0;i<_levelData.row;i++){
            for(int j=0;j<_levelData.col;j++){
                if(cellGrid[i,j]!=null && cellGrid[i,j].Number!=0){
                    return; // If any cell is not empty, return without finishing the game
                }
            }
        }
        hasgameFinished=true; // Set game as finished if all cells are empty
    }





    private int GetDirectionIndex(Vector2Int offsetDirection){
        int result=0;
        if(offsetDirection==Vector2Int.right){
            result=0;
        }
        if(offsetDirection==Vector2Int.up){
            result=1;
        }
        if(offsetDirection==Vector2Int.left){
            result=2;
        }
        if(offsetDirection==Vector2Int.down){
            result=3;
        }
        return result; // Return the index of the direction (0 = right, 1 = up, 2 = left, 3 = down)
    }

    private float GetOffset(Vector2 offset,Vector2Int offsetDirection){
        float result=0;
        if(offsetDirection==Vector2Int.left || offsetDirection==Vector2Int.right){
            result=Mathf.Abs(offset.x);

        }
        if(offsetDirection==Vector2Int.up || offsetDirection==Vector2Int.down){
            result=Mathf.Abs(offset.y);
        }
        return result; // Return the absolute offset value based on the direction (horizontal or vertical)
    }

    private Vector2Int GetDirection(Vector2 offset){
        Vector2Int result=Vector2Int.zero;
        if(Mathf.Abs(offset.y)>Mathf.Abs(offset.x)&&offset.y>0){
            result=Vector2Int.up; // If vertical offset is greater and positive, set direction to up
        }
        if(Mathf.Abs(offset.y)>Mathf.Abs(offset.x)&&offset.y<0){
            result=Vector2Int.down; // If vertical offset is greater and negative, set direction to down
        }
        if(Mathf.Abs(offset.x)>Mathf.Abs(offset.y)&&offset.x>0){
            result=Vector2Int.right; // If horizontal offset is greater and positive, set direction to right
        }
        if(Mathf.Abs(offset.x)>Mathf.Abs(offset.y)&&offset.x<0){
            result=Vector2Int.left; // If horizontal offset is greater and negative, set direction to left
        }
        return result; // Return the determined direction based on the offset
    }


    public Cell GetAdjacentCell(int row, int col, int direction) // Method to find the nearest valid adjacent cell in a specific direction
    {
        Vector2Int currentDirection = Directions[direction]; // Get the direction vector (e.g., up, right, down, left) based on the direction index
        Vector2Int startPos = new Vector2Int(row, col); // Create a starting position vector using the given row and column
        Vector2Int checkPos = startPos + currentDirection; // Calculate the first position to check by moving in the specified direction

        // Continue checking in the specified direction until a valid cell is found or the position is out of bounds
        while (Isvalid(checkPos) && cellGrid[checkPos.x, checkPos.y] == null)
        {
            checkPos += currentDirection; // Move further in the same direction
        }

        // Return the cell at the valid position if found, otherwise return null
        return Isvalid(checkPos) ? cellGrid[checkPos.x, checkPos.y] : null;
    }
    public bool Isvalid(Vector2Int pos)
    {
        return pos.x >= 0 && pos.y >= 0 && pos.x < _levelData.row && pos.y < _levelData.col; // Check if position is within grid bounds
    }



}



[Serializable]
public struct LevelData
{
    public int row, col;
    public List<int> data;

}



