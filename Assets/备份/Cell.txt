using System.Collections.Generic;
using TMPro;
using UnityEngine;

public class Cell : MonoBehaviour
{
    // Public properties
    [HideInInspector] public int Number {
        get{
            return number; 
        }
        set{
            number=value;
            _numberText.text=number.ToString(); // Update the displayed number text
            if(number == 0) // If the number is 0, hide the text
            {
                _cellSprite.color=_solverColor; // Change color to solver color
                _numberText.gameObject.SetActive(false); // Hide the number text
            }
            else if(number<0)
            {
                _cellSprite.color=_inCorrectColor;
                _numberText.gameObject.SetActive(false); // Hide the number text    
            }
            else
            {
                _cellSprite.color=_defaultColor; // Reset to default color
                _numberText.gameObject.SetActive(true); // Show the number text
            }
        }
    }
       



    [HideInInspector] public int Row;                 // Row position in grid
    [HideInInspector] public int Column;              // Column position in grid
    
    // Serialized fields (visible in Unity Inspector)
    [SerializeField] private TMP_Text _numberText;    // Text component for displaying number
    [SerializeField] private SpriteRenderer _cellSprite; // Background sprite renderer
    
    // Connection line objects for different states
    [SerializeField] private GameObject _right1;  // Right connection line type 1
    [SerializeField] private GameObject _right2;  // Right connection line type 2
    [SerializeField] private GameObject _top1;    // Top connection line type 1
    [SerializeField] private GameObject _top2;    // Top connection line type 2
    [SerializeField] private GameObject _left1;   // Left connection line type 1
    [SerializeField] private GameObject _left2;   // Left connection line type 2
    [SerializeField] private GameObject _bottom1; // Bottom connection line type 1
    [SerializeField] private GameObject _bottom2; // Bottom connection line type 2

    // Color configurations
    [SerializeField] private Color _defaultColor;   // Default state color
    [SerializeField] private Color _solverColor;    // Correct solution color
    [SerializeField] private Color _inCorrectColor; // Incorrect solution color

    private int number; // Backing field for Number (note naming convention difference)
    
    // Data structures
    private Dictionary<int, Dictionary<int, GameObject>> edges; // Nested dictionary: [direction][lineType] = lineObject
    private Dictionary<int, int> edgeCounts;          // Connection count per direction
    private Dictionary<int, Cell> connectedCell;      // Connected cells in each direction

    // Direction constants
    private const int RIGHT = 0;   // Right direction identifier
    private const int TOP = 1;     // Up direction identifier
    private const int LEFT = 2;    // Left direction identifier
    private const int BOTTOM = 3;  // Down direction identifier


public void Init(int row,int col,int num){
    Number=num;
    Row=row;
    Column=col;

    edgeCounts=new Dictionary<int, int>(){
        {RIGHT,0},
        {TOP,0},
        {LEFT,0},
        {BOTTOM,0}
    };

    connectedCell=new Dictionary<int, Cell>(){
        {RIGHT,null},
        {TOP,null},
        {LEFT,null},
        {BOTTOM,null}
    };

    edges=new Dictionary<int, Dictionary<int, GameObject>>();
    edges[RIGHT]=new Dictionary<int, GameObject>();
    edges[RIGHT][1]=_right1; // Right connection line type 1
    edges[RIGHT][2]=_right2; // Right connection line type 2

    edges[TOP]=new Dictionary<int, GameObject>();
    edges[TOP][1]=_top1; // Up connection line type 1   
    edges[TOP][2]=_top2; // Up connection line type 2

    edges[LEFT]=new Dictionary<int, GameObject>();
    edges[LEFT][1]=_left1; // Left connection line type 1
    edges[LEFT][2]=_left2; // Left connection line type 2

    edges[BOTTOM]=new Dictionary<int, GameObject>();
    edges[BOTTOM][1]=_bottom1; // Down connection line type 1
    edges[BOTTOM][2]=_bottom2; // Down connection line type 2
    // Hide all connection lines initially
    
}


public void Init(){
    for(int i=0;i<4;i++){
        connectedCell[i]=GameManager.Instance.GetAdjacentCell(Row,Column,i);
        if(connectedCell[i]==null) continue; // Skip if no adjacent cell

        var singleEdge=edges[i][1].GetComponentInChildren<SpriteRenderer>();
        var doubleEdges=edges[i][2].GetComponentsInChildren<SpriteRenderer>();
        Vector2Int edgeOffset=new Vector2Int(connectedCell[i].Row-Row,connectedCell[i].Column-Column);
        float edgeSize=Mathf.Abs(edgeOffset.x)>Mathf.Abs(edgeOffset.y) ? Mathf.Abs(edgeOffset.x):Mathf.Abs(edgeOffset.y);
        edgeSize *=GameManager.Instance.EdgeSize;
        ChangeSpriteSize(singleEdge,edgeSize); // Set the size of the single edge
        foreach(var item in doubleEdges){
            ChangeSpriteSize(item,edgeSize); // Set the size of the double edges
        }
    }

    // Hide all connection lines initially
    _right1.SetActive(false); // Hide right connection line type 1
    _right2.SetActive(false); // Hide right connection line type 2
    _top1.SetActive(false);   // Hide up connection line type 1
    _top2.SetActive(false);   // Hide up connection line type 2
    _left1.SetActive(false);  // Hide left connection line type 1
    _left2.SetActive(false);  // Hide left connection line type 2
    _bottom1.SetActive(false); // Hide down connection line type 1
    _bottom2.SetActive(false); // Hide down connection line type 2


}

public void AddEdge(int direction){
    if (connectedCell[direction] == null) return; // Skip if no connected cell
    if(edgeCounts[direction]==2){
        RemoveEdge(direction); 
        RemoveEdge(direction); 
        return; // Skip if already two edges in this direction
    }
    edgeCounts[direction]++; // Increment edge count for the direction
    Number--; // Decrease the number in the cell
    edges[direction][1].SetActive(false); 
    edges[direction][2].SetActive(false); 
    edges[direction][edgeCounts[direction]].SetActive(true); // Activate the appropriate edge type
}

public void RemoveEdge(int direction){
    if(connectedCell[direction] == null || edgeCounts[direction]==0)  return; // Skip if no connected cell or no edges to remove
    edgeCounts[direction]--; // Decrement edge count for the direction
    Number++; // Increase the number in the cell
    edges[direction][1].SetActive(false); 
    edges[direction][2].SetActive(false); 
    if(edgeCounts[direction]!=0){
            edges[direction][edgeCounts[direction]].SetActive(true); // Activate the appropriate edge type

    }
}
public void RemoveAllEdges(){
    for(int i=0;i<4;i++){
        RemoveEdge(i); // Remove 1st edge
        RemoveEdge(i); // Remove 2nd edge
    }
}

private void ChangeSpriteSize(SpriteRenderer sprite,float size){
    sprite.size=new Vector2(sprite.size.x,size); // Set the size of the sprite
}



public bool IsValidCell(Cell  cell,int direction){
    return connectedCell[direction]==cell; // Check if the connected cell in the specified direction is valid
}






}

